// CI 작업
// 1. git hub 접속해서 특정 브런치의 코드를 가져온다.
// 2. 리액트 코드를 빌드 및 테스트 진행
// 3. 도커 이미지 생성 (Dockerfile -> 도커 이미지화)

// CD 작업
// 4. 도커 허브에 이미지 푸쉬
// 5. AWS Ec2에 SSH 접속 한 후 
//   - 기존 도커 컨테이너가 실행 중인게 있으면 중지
//   - 기존 도커 컨테이너 실행 중인게 있으면 삭제
//   - 도커 이미지 삭제
//   - 도커 이미지 pull 및 실행 (docker run ~)   

// slack 메시지 생성

pipeline {
    agent any
 
    environment {
        // 환경 변수 추가
        DOCKERHUB_CREDENTIALS = credentials('docker-user')
    }


    stages {
        // 1. GitHub에서 특정 브랜치의 코드 가져오기
        stage('checkout') {
            steps {
                git branch: 'main',
                url: 'https://github.com/SSOL-YANG/jenkins-test.git',
                credentialsId: 'github-user'
            }
        }

        // 2. 리액트 코드 빌드 및 테스트 진행
        stage('build') {
            steps {
                sh 'npm ci'
                sh "npm run build"
            }
        }

        // 3. 도커 이미지 생성 및 Docker Hub에 푸시
        stage('Dockerize') {
            steps {
                // 도커 이미지 빌드
                sh 'docker build -t mason9/jenkins-test .'

                // 도커 허브에 로그인
                sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"

                // 도커 이미지 푸시
                sh 'docker push mason9/jenkins-test'

                // 도커 이미지 삭제 (불필요한 파일 삭제)
                sh 'docker rmi mason9/jenkins-test'
            }
        }
        // 4. AWS EC2에 SSH로 접속하여 도커 컨테이너 실행
        stage('deploy') {
            environment {
                // SSH 를 통해 EC2에 접속하기 위한 환경 변수
                SSH_HOST = 'ec2-52-79-183-224.ap-northeast-2.compute.amazonaws.com'
                SSH_USER = 'mason'
                SSH_PORT = '22'
                DOCKER_CONTAINER_NAME = 'jenkins-test'
                DOCKER_IMAGE_NAME = 'mason9/jenkins-test'
            }
            steps {
                // SSH로 EC2에 접속하여 컨테이너 실행
                sshagent(['SSH_KEY']) {
                    sh "ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST 'docker stop $DOCKER_CONTAINER_NAME || true && docker rm $DOCKER_CONTAINER_NAME || true && docker rmi $DOCKER_IMAGE_NAME || true && docker pull $DOCKER_IMAGE_NAME && docker run -d --name $DOCKER_CONTAINER_NAME -p 80:80 $DOCKER_IMAGE_NAME'"
                }
            }
        }

          // 5. Slack 메시지 보내기
          stage('notification') {
            steps {
                // Slack 메시지 전송
                slackSend channel: '#jenkins',
                        message: 'Jenkins CD 파이프라인이 성공적으로 실행되었습니다.'
            }
    }
}